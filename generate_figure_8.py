import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.patches import Rectangle
from matplotlib.gridspec import GridSpec

# Set the color cycle to use colors from the 'magma' colormap
def set_cycle(num_colors = 10, start=0):
    colors = plt.cm.magma(np.linspace(0, 1, num_colors)[start:])
    mpl.rcParams['axes.prop_cycle'] = mpl.cycler(color=colors)

plot_dpi = 600
plot_width = 12
plot_height_single = 3
plot_height_double = 6

set_cycle()

from matplotlib.ticker import MaxNLocator

# GramFE parameters for extension of size 14
FLAG_SPECTRAL_ORDER = 14
FLAG_SPECTRAL_NDELTA = 14
FLAG_SPECTRAL_ND = 32


flag_spectral_polynomials = np.array([

[-0.4309458036856673168735198942158604040741920471191406250000000000, -0.3646464492724877382023862537607783451676368713378906250000000000, -0.2983470948593081595312526133056962862610816955566406250000000000, -0.2320477404461285531045433572217007167637348175048828125000000000, -0.1657483860329489744334097167666186578571796417236328125000000000, -0.0994490316197693818844882684970798436552286148071289062500000000, -0.0331496772065897962744607241347694071009755134582519531250000000, 0.0331496772065897962744607241347694071009755134582519531250000000, 0.0994490316197693818844882684970798436552286148071289062500000000, 0.1657483860329489744334097167666186578571796417236328125000000000, 0.2320477404461285531045433572217007167637348175048828125000000000, 0.2983470948593081595312526133056962862610816955566406250000000000, 0.3646464492724877382023862537607783451676368713378906250000000000, 0.4309458036856673168735198942158604040741920471191406250000000000],
[0.4818120558297157574045854744326788932085037231445312500000000000, 0.2594372608313854078332383323868270963430404663085937500000000000, 0.0741249316661101165237823806819505989551544189453125000000000000, -0.0741249316661101165237823806819505989551544189453125000000000000, -0.1853123291652752913094559517048764973878860473632812500000000000, -0.2594372608313854078332383323868270963430404663085937500000000000, -0.2964997266644404660951295227278023958206176757812500000000000000, -0.2964997266644404660951295227278023958206176757812500000000000000, -0.2594372608313854078332383323868270963430404663085937500000000000, -0.1853123291652752913094559517048764973878860473632812500000000000, -0.0741249316661101165237823806819505989551544189453125000000000000, 0.0741249316661101165237823806819505989551544189453125000000000000, 0.2594372608313854078332383323868270963430404663085937500000000000, 0.4818120558297157574045854744326788932085037231445312500000000000],
[-0.4585783658733355583336788185988552868366241455078125000000000000, -0.0352752589133335028859228543751669349148869514465332031250000000, 0.2116515534800010311933249340654583647847175598144531250000000000, 0.3142704885006075699038774473592638969421386718750000000000000000, 0.3046499633424257225122744330292334780097007751464843750000000000, 0.2148583951993949803238592721754685044288635253906250000000000000, 0.0769642012654549179107021927848109044134616851806640625000000000, -0.0769642012654549179107021927848109044134616851806640625000000000, -0.2148583951993949803238592721754685044288635253906250000000000000, -0.3046499633424257225122744330292334780097007751464843750000000000, -0.3142704885006075699038774473592638969421386718750000000000000000, -0.2116515534800010311933249340654583647847175598144531250000000000, 0.0352752589133335028859228543751669349148869514465332031250000000, 0.4585783658733355583336788185988552868366241455078125000000000000],
[0.3875694570442999031811837085115257650613784790039062500000000000, -0.2086912461007768837539799733349354937672615051269531250000000000, -0.3577564218870460943655587016110075637698173522949218750000000000, -0.2493453849515775699874353676932514645159244537353515625000000000, -0.0352335870040272683412219123511022189632058143615722656250000000, 0.1707473831733629099360882719338405877351760864257812500000000000, 0.2927097997257649963920300706377020105719566345214843750000000000, 0.2927097997257649963920300706377020105719566345214843750000000000, 0.1707473831733629099360882719338405877351760864257812500000000000, -0.0352335870040272683412219123511022189632058143615722656250000000, -0.2493453849515775699874353676932514645159244537353515625000000000, -0.3577564218870460943655587016110075637698173522949218750000000000, -0.2086912461007768837539799733349354937672615051269531250000000000, 0.3875694570442999031811837085115257650613784790039062500000000000],
[-0.2948961391092899120280890201684087514877319335937500000000000000, 0.3856334126813791285393051566643407568335533142089843750000000000, 0.2722118207162676495336484094877960160374641418457031250000000000, -0.0577419013640567690970328840194270014762878417968750000000000000, -0.2866472960572818418079066304926527664065361022949218750000000000, -0.2990205606352939748937558306352002546191215515136718750000000000, -0.1237326457801216500476115811579802539199590682983398437500000000, 0.1237326457801216500476115811579802539199590682983398437500000000, 0.2990205606352939748937558306352002546191215515136718750000000000, 0.2866472960572818418079066304926527664065361022949218750000000000, 0.0577419013640567690970328840194270014762878417968750000000000000, -0.2722118207162676495336484094877960160374641418457031250000000000, -0.3856334126813791285393051566643407568335533142089843750000000000, 0.2948961391092899120280890201684087514877319335937500000000000000],
[0.2027563273040598468277551091887289658188819885253906250000000000, -0.4523025762936719873508195632894057780504226684570312500000000000, -0.0155966405618507587826915283812923007644712924957275390625000000, 0.3218579461400111196844875394162954762578010559082031250000000000, 0.2623071367220354832561213243025122210383415222167968750000000000, -0.0354469103678426294967707121941202785819768905639648437500000000, -0.2835752829427410359741656975529622286558151245117187500000000000, -0.2835752829427410359741656975529622286558151245117187500000000000, -0.0354469103678426294967707121941202785819768905639648437500000000, 0.2623071367220354832561213243025122210383415222167968750000000000, 0.3218579461400111196844875394162954762578010559082031250000000000, -0.0155966405618507587826915283812923007644712924957275390625000000, -0.4523025762936719873508195632894057780504226684570312500000000000, 0.2027563273040598468277551091887289658188819885253906250000000000],
[-0.1257441362172087295778766247167368419468402862548828125000000000, 0.4159229121030749709575502492953091859817504882812500000000000000, -0.2611608982972796755284150549414334818720817565917968750000000000, -0.3104033572354872316800822318327846005558967590332031250000000000, 0.0835363142701736199891016099172702524811029434204101562500000000, 0.3297486089612116644254058428487041965126991271972656250000000000, 0.1758659247793128987957800291042076423764228820800781250000000000, -0.1758659247793128987957800291042076423764228820800781250000000000, -0.3297486089612116644254058428487041965126991271972656250000000000, -0.0835363142701736199891016099172702524811029434204101562500000000, 0.3104033572354872316800822318327846005558967590332031250000000000, 0.2611608982972796755284150549414334818720817565917968750000000000, -0.4159229121030749709575502492953091859817504882812500000000000000, 0.1257441362172087295778766247167368419468402862548828125000000000],
[0.0699086407042275592704783093722653575241565704345703125000000000, -0.3172776770422635062018912321946118026971817016601562500000000000, 0.4248294319718443623479231519013410434126853942871093750000000000, 0.0376431142253532968755536103344638831913471221923828125000000000, -0.3495432035211377685968159312324132770299911499023437500000000000, -0.1344396936619760840603277074478683061897754669189453125000000000, 0.2688793873239521681206554148957366123795509338378906250000000000, 0.2688793873239521681206554148957366123795509338378906250000000000, -0.1344396936619760840603277074478683061897754669189453125000000000, -0.3495432035211377685968159312324132770299911499023437500000000000, 0.0376431142253532968755536103344638831913471221923828125000000000, 0.4248294319718443623479231519013410434126853942871093750000000000, -0.3172776770422635062018912321946118026971817016601562500000000000, 0.0699086407042275592704783093722653575241565704345703125000000000],
[-0.0344591278812576007339885109104216098785400390625000000000000000, 0.2041040651428334962158572807311429642140865325927734375000000000, -0.4320644495880761049022567021893337368965148925781250000000000000, 0.2836251294841972137028562883642734959721565246582031250000000000, 0.2359124908793789887617720069101778790354728698730468750000000000, -0.2783237251947729418155574876436730846762657165527343750000000000, -0.2385631930240910969498457916415645740926265716552734375000000000, 0.2385631930240910969498457916415645740926265716552734375000000000, 0.2783237251947729418155574876436730846762657165527343750000000000, -0.2359124908793789887617720069101778790354728698730468750000000000, -0.2836251294841972137028562883642734959721565246582031250000000000, 0.4320644495880761049022567021893337368965148925781250000000000000, -0.2041040651428334962158572807311429642140865325927734375000000000, 0.0344591278812576007339885109104216098785400390625000000000000000],
[0.0147897728358395794817647939112248423043638467788696289062500000, -0.1103544588520337932369130840015714056789875030517578125000000000, 0.3276503520555230086763742747280048206448554992675781250000000000, -0.4459685347422396306527048182033468037843704223632812500000000000, 0.1422093541907651914613097687833942472934722900390625000000000000, 0.3174112785537879233288549585267901420593261718750000000000000000, -0.2457377640416422426294928982315468601882457733154296875000000000, -0.2457377640416422426294928982315468601882457733154296875000000000, 0.3174112785537879233288549585267901420593261718750000000000000000, 0.1422093541907651914613097687833942472934722900390625000000000000, -0.4459685347422396306527048182033468037843704223632812500000000000, 0.3276503520555230086763742747280048206448554992675781250000000000, -0.1103544588520337932369130840015714056789875030517578125000000000, 0.0147897728358395794817647939112248423043638467788696289062500000],
[-0.0053617479838052716639706929413478064816445112228393554687500000, 0.0490806161594482537324779514165129512548446655273437500000000000, -0.1913731588065881450422267562316847033798694610595703125000000000, 0.3992440037171925415471207543305354192852973937988281250000000000, -0.4310020494674237645504888405412202700972557067871093750000000000, 0.0952741372506936690101042586320545524358749389648437500000000000, 0.3266541848595211350314571063790936022996902465820312500000000000, -0.3266541848595211350314571063790936022996902465820312500000000000, -0.0952741372506936690101042586320545524358749389648437500000000000, 0.4310020494674237645504888405412202700972557067871093750000000000, -0.3992440037171925415471207543305354192852973937988281250000000000, 0.1913731588065881450422267562316847033798694610595703125000000000, -0.0490806161594482537324779514165129512548446655273437500000000000, 0.0053617479838052716639706929413478064816445112228393554687500000],
[0.0015503894602372355823738381275234132772311568260192871093750000, -0.0170542840626095905387504814143539988435804843902587890625000000, 0.0837210308528107266523576868166856002062559127807617187500000000, -0.2387599768765342744814006437081843614578247070312500000000000000, 0.4263571015652398155104663146630628034472465515136718750000000000, -0.4604656696904589896490733735845424234867095947265625000000000000, 0.2046514087513151003427935847867047414183616638183593750000000000, 0.2046514087513151003427935847867047414183616638183593750000000000, -0.4604656696904589896490733735845424234867095947265625000000000000, 0.4263571015652398155104663146630628034472465515136718750000000000, -0.2387599768765342744814006437081843614578247070312500000000000000, 0.0837210308528107266523576868166856002062559127807617187500000000, -0.0170542840626095905387504814143539988435804843902587890625000000, 0.0015503894602372355823738381275234132772311568260192871093750000],
[-0.0003100778920474471056327459006496383153717033565044403076171875, 0.0040310125966168128611166743269222934031859040260314941406250000, -0.0241860755797008754319765699847266660071909427642822265625000000, 0.0886822771255698777403964072618691716343164443969726562500000000, -0.2217056928139246874120971142474445514380931854248046875000000000, 0.3990702470650644428928899287711828947067260742187500000000000000, -0.5320936627534192941979540592001285403966903686523437500000000000, 0.5320936627534192941979540592001285403966903686523437500000000000, -0.3990702470650644428928899287711828947067260742187500000000000000, 0.2217056928139246874120971142474445514380931854248046875000000000, -0.0886822771255698777403964072618691716343164443969726562500000000, 0.0241860755797008754319765699847266660071909427642822265625000000, -0.0040310125966168128611166743269222934031859040260314941406250000, 0.0003100778920474471056327459006496383153717033565044403076171875],
])


def calculate_coefficients(y, max_order = 14, precision=np.double):
    order     = np.arange(1, max_order+1)
    coeffs    = np.zeros(max_order)

    # Machine epsilon for single precision
    epsilon = np.finfo(precision).eps

    input_data = np.real(y)

    # Step 1: DO NOT Normalize the input data
    normalized_data = input_data

    # Calculate polynomial coefficients
    for i in range(max_order):
        data = normalized_data[:max_order].astype(precision)
        noisy_data = data + np.random.uniform(-epsilon/2, epsilon/2, size=data.shape)
        coeffs[i] = np.dot(flag_spectral_polynomials[i], noisy_data)  # simplified for clarity


    return coeffs

def gaussian_wave_packet_1d(t, x, Gau_v0, Gau_Width, Gau_Center):
    # Define constants
    ELBDM_ETA = 1.0  # Example value for ELBDM_ETA

    # Calculate the required constants
    Gau_Const1 = 1.0 + (t / (ELBDM_ETA * Gau_Width**2))**2
    Gau_Theta1 = -0.5 * np.arctan(t / (ELBDM_ETA * Gau_Width**2))

    # Calculate the wave packet
    dr1 = x - Gau_v0 * t - Gau_Center
    dr2 = x - 0.5 * Gau_v0 * t - Gau_Center
    Gau_Const2 = (Gau_Width**2 * np.pi * Gau_Const1)**(-0.25) * np.exp(-0.5 * (dr1 / Gau_Width)**2 / Gau_Const1)
    Gau_Theta2 = (0.5 * dr1**2 * ELBDM_ETA * t / ((ELBDM_ETA * Gau_Width**2)**2 + t**2) + Gau_v0 * ELBDM_ETA * dr2)

    Re = Gau_Const2 * np.cos(Gau_Theta1 + Gau_Theta2)
    Im = Gau_Const2 * np.sin(Gau_Theta1 + Gau_Theta2)
    PPW = 1/Gau_v0 * len(x)
    return Re + 1j * Im, PPW


def background_perturbation(t, x, A, B, k):
    Re =  A + B * np.cos(x * k)
    Im =  A + B * np.sin(x * k)
    return Re + 1j * Im



# Sample data
size_1d = 32
x = np.linspace(0, 2 * np.pi, size_1d)
ks = [1, 4, 8]
ys = [np.exp(1j * x * k) for k in ks]

prec = np.single

colors = plt.cm.magma(np.array([0, 0.35, 0.7]))
fig = plt.figure(figsize=(plot_width, plot_height_single), dpi=plot_dpi)
gs = GridSpec(1, 3)

cutoff_index = 12

# Plot 1: y over x
ax1 = fig.add_subplot(gs[0, 0])
for i in range(len(ks)):
    ax1.plot(x, np.real(ys[i]), '.-', label=f'k={ks[i]}', color=colors[i])
ax1.set_xticks([0, np.pi, 2*np.pi], [r"$0$", r"$\pi$", r"$2\pi$"])
ax1.set_xlabel(r'$x$')
ax1.set_ylim([-1.6, 1.6])
ax1.set_title(r'(a) $cos(k x)$')
ax1.legend(loc="lower left")



# Plot 2: Polynomial coefficients and decay
ax2 = fig.add_subplot(gs[0, 1])
for i in range(len(ks)):
    coeffs = calculate_coefficients(ys[i], precision = prec)
    ax2.scatter(np.arange(1, len(coeffs)+1), np.abs(coeffs), label=f'k={ks[i]}', color=colors[i])
ax2.set_yscale("log")
ax2.axvspan(13, 14, alpha=0.1, color="k", label=r"Coeff. for $N_{c}=2$")
ax2.legend(loc="lower left", fontsize="small")
ax2.set_xlabel('Polynomial order')
ax2.set_title('(b) Coefficient magnitude')
# Enforce integer ticks on the x-axis
ax2.xaxis.set_major_locator(MaxNLocator(integer=True))

# Plot 3: Magnitude of the last to coefficients as a function of k
ax3 = fig.add_subplot(gs[0, 2])

ks = np.array([1, 4, 8])
ys = np.array([np.exp(1j * x * k) for k in ks])

for i in range(len(ks)):
    coeffs = calculate_coefficients(ys[i], precision = prec)
    cutoff = np.max(np.abs(coeffs[cutoff_index:]))
    ax3.scatter(size_1d/ks[i], cutoff, label=f'k={ks[i]}', color=colors[i])

y = []
ks = np.logspace(-3, 2, 1000)
for k in ks:
    f = np.exp(1j * x * k)
    coeffs = calculate_coefficients(f, precision = prec)
    cutoff = np.max(np.abs(coeffs[cutoff_index:]))
    y.append(cutoff)
ax3.plot(size_1d/ks, y, c="k", alpha=0.6, label=r"Cosine")

y=[]
ppws=[]
ks = np.logspace(-3, 2, 1000)
for k in ks:
    f, ppw = gaussian_wave_packet_1d(t=0, x=x, Gau_v0=k, Gau_Width = 2, Gau_Center = np.pi)
    coeffs = calculate_coefficients(f, precision = prec)
    cutoff = np.max(np.abs(coeffs[cutoff_index:]))
    y.append(cutoff)
    ppws.append(ppw)

ax3.plot(size_1d/ks, y, c="purple", alpha=0.6, ls="dashed",label=f"Gaussian")

ax3.set_xlim([2, 40])
ax3.set_xscale("log")

ax3.set_yscale("log")
ax3.set_xticks([2, 3, 4, 6, 10, 20], ["2", "3", "4", "6", "10", "20"])
ax3.set_xlabel('Number of points per wavelength')
ax3.set_title(r'(c) Maximum of last $N_c$ coefficients')
ax3.legend(loc="lower left")

# Ticks on the inside and on all sides of the plot
ax1.tick_params(direction='in', which='both', top=True, right=True)
ax2.tick_params(direction='in', which='both', top=True, right=True)
ax3.tick_params(direction='in', which='both', top=True, right=True)
plt.tight_layout()

plt.savefig("figures/figure_8.pdf", bbox_inches='tight')
plt.close()